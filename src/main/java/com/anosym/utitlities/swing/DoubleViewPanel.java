/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DoubleViewPanel.java
 *
 * Created on Jan 19, 2011, 7:30:50 AM
 */
package com.anosym.utitlities.swing;

import com.anosym.utilities.Duplex;
import java.awt.Container;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.border.TitledBorder;

/**
 *
 * @author Marembo
 */
public class DoubleViewPanel<T1, T2> extends javax.swing.JPanel {

    /** Creates new form DoubleViewPanel */
    public DoubleViewPanel() {
        initComponents();
        this.selection = new Duplex<List<T1>, List<T2>>();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        acceptButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("First List"));

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${firstList}");
        org.jdesktop.swingbinding.JListBinding jListBinding = org.jdesktop.swingbinding.SwingBindings.createJListBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, jList1);
        bindingGroup.addBinding(jListBinding);
        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${firstSelection}"), jList1, org.jdesktop.beansbinding.BeanProperty.create("selectedElements"));
        bindingGroup.addBinding(binding);

        jScrollPane1.setViewportView(jList1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("First List"));

        jList2.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${secondList}");
        jListBinding = org.jdesktop.swingbinding.SwingBindings.createJListBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, jList2);
        bindingGroup.addBinding(jListBinding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${secondSelection}"), jList2, org.jdesktop.beansbinding.BeanProperty.create("selectedElements"));
        bindingGroup.addBinding(binding);

        jScrollPane2.setViewportView(jList2);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        acceptButton.setText("Accept");
        acceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(368, 368, 368)
                        .addComponent(cancelButton)
                        .addGap(18, 18, 18)
                        .addComponent(acceptButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jPanel1, jPanel2});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {acceptButton, cancelButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(acceptButton)
                    .addComponent(cancelButton))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jPanel1, jPanel2});

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        this.selection = null;
        close();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void acceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptButtonActionPerformed
        // TODO add your handling code here:
        this.selection.setFirstValue(firstList);
        this.selection.setSecondValue(secondList);
        this.close();
    }//GEN-LAST:event_acceptButtonActionPerformed

    public static <T1, T2> Duplex<List<T1>, List<T2>> showSelection(List<T1> list1, List<T2> list2, String title1, String title2) {
        JDialog dialog = new JDialog();
        dialog.setTitle("Multiple Selection");
        DoubleViewPanel<T1, T2> panel = new DoubleViewPanel<T1, T2>();
        panel.setFirstList(list1);
        panel.setSecondList(list2);
        ((TitledBorder) panel.jPanel1.getBorder()).setTitle(title1);
        ((TitledBorder) panel.jPanel2.getBorder()).setTitle(title2);
        dialog.add(panel);
        dialog.pack();
        SwingFramework.toCentre(dialog);
        dialog.setVisible(true);
        synchronized (panel) {
            try {
                while (dialog.isVisible()) {
                    panel.wait();
                }
            } catch (InterruptedException ex) {
               
            }
        }
        return panel.selection;
    }

    private void close() {
        Container parent = this.getParent();
        while (parent != null && !(parent instanceof JDialog)) {
            parent = parent.getParent();
        }
        if (parent != null) {
            ((JDialog) parent).dispose();
            synchronized(this){
                this.notifyAll();
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
    private List<T1> firstList;
    public static final String PROP_FIRSTLIST = "firstList";
    private List<T2> secondList;
    public static final String PROP_SECONDLIST = "secondList";
    private Duplex<List<T1>, List<T2>> selection;
    public static final String PROP_SELECTION = "selection";
    private List<T1> firstSelection;
    public static final String PROP_FIRSTSELECTION = "firstSelection";
    private List<T2> secondSelection;
    public static final String PROP_SECONDSELECTION = "secondSelection";

    /**
     * Get the value of secondSelection
     *
     * @return the value of secondSelection
     */
    public List<T2> getSecondSelection() {
        return secondSelection;
    }

    /**
     * Set the value of secondSelection
     *
     * @param secondSelection new value of secondSelection
     */
    public void setSecondSelection(List<T2> secondSelection) {
        List<T2> oldSecondSelection = this.secondSelection;
        this.secondSelection = secondSelection;
        propertyChangeSupport.firePropertyChange(PROP_SECONDSELECTION, oldSecondSelection, secondSelection);
    }

    /**
     * Get the value of firstSelection
     *
     * @return the value of firstSelection
     */
    public List<T1> getFirstSelection() {
        return firstSelection;
    }

    /**
     * Set the value of firstSelection
     *
     * @param firstSelection new value of firstSelection
     */
    public void setFirstSelection(List<T1> firstSelection) {
        List<T1> oldFirstSelection = this.firstSelection;
        this.firstSelection = firstSelection;
        propertyChangeSupport.firePropertyChange(PROP_FIRSTSELECTION, oldFirstSelection, firstSelection);
    }

    /**
     * Get the value of selection
     *
     * @return the value of selection
     */
    public Duplex<List<T1>, List<T2>> getSelection() {
        return selection;
    }

    /**
     * Set the value of selection
     *
     * @param selection new value of selection
     */
    public void setSelection(Duplex<List<T1>, List<T2>> selection) {
        Duplex<List<T1>, List<T2>> oldSelection = this.selection;
        this.selection = selection;
        propertyChangeSupport.firePropertyChange(PROP_SELECTION, oldSelection, selection);
    }

    /**
     * Get the value of secondList
     *
     * @return the value of secondList
     */
    public List<T2> getSecondList() {
        return secondList;
    }

    /**
     * Set the value of secondList
     *
     * @param secondList new value of secondList
     */
    public void setSecondList(List<T2> secondList) {
        List<T2> oldSecondList = this.secondList;
        this.secondList = secondList;
        propertyChangeSupport.firePropertyChange(PROP_SECONDLIST, oldSecondList, secondList);
    }

    /**
     * Get the value of firstList
     *
     * @return the value of firstList
     */
    public List<T1> getFirstList() {
        return firstList;
    }

    /**
     * Set the value of firstList
     *
     * @param firstList new value of firstList
     */
    public void setFirstList(List<T1> firstList) {
        List<T1> oldFirstList = this.firstList;
        this.firstList = firstList;
        propertyChangeSupport.firePropertyChange(PROP_FIRSTLIST, oldFirstList, firstList);
    }
    private PropertyChangeSupport propertyChangeSupport = new PropertyChangeSupport(this);

    /**
     * Add PropertyChangeListener.
     *
     * @param listener
     */
    public void addPropertyChangeListener(PropertyChangeListener listener) {
        propertyChangeSupport.addPropertyChangeListener(listener);
    }

    /**
     * Remove PropertyChangeListener.
     *
     * @param listener
     */
    public void removePropertyChangeListener(PropertyChangeListener listener) {
        propertyChangeSupport.removePropertyChangeListener(listener);
    }
}
